<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8" />
	<title>巢狀組件結構</title>
	<script src="https://unpkg.com/react@15/dist/react.min.js"></script>
	<script src="https://unpkg.com/react-dom@15/dist/react-dom.min.js"></script>
	<script>
		// 設計組件類別
		class MyHead extends React.Component{
			componentWillMount(){
				console.log("Will Mount");
			}
			componentDidMount(){
				console.log("Did Mount");
			}
			componentWillUnmount(){
				console.log("Will Unmount");
			}
			render(){ // 實作 render 方法，使用 this.props 建立顯示的彈性
				return React.createElement("H"+this.props.level, null, "Hello World");
			}
		}
		class MyHeadList extends React.Component{
			constructor(props){
				super(props);
				this.state={max:1};
			}
			render(){
				let heads=[];
				for(let i=1;i<this.state.max;i++){
					heads.push(React.createElement(MyHead, {level:i}));
				}
				return React.createElement("DIV", null, heads);
			}
			update(){
				if(this.state.max<=6){
					this.setState((currentState)=>({max:currentState.max+1}));
				}
			}
			componentWillUpdate(){
				console.log("Will Update");
			}
			componentDidUpdate(){
				console.log("Did Update");
			}
			componentWillMount(){
				console.log("List Will Mount");
				this.animeId=window.setInterval(()=>{
					this.update();
				}, 1000);
			}
			componentDidMount(){
				console.log("List Did Mount");
			}
			componentWillUnmount(){
				console.log("List Will Unmount");
				window.clearInterval(this.animeId);
			}
		}
		window.addEventListener("load", ()=>{
			// 1. 建立自訂的 React 組件實體，並提供組件的屬性物件
			let list=React.createElement(MyHeadList);
			// 2. 將建立好的 React 組件實體畫到容器中
			ReactDOM.render(
				list, document.body
			);
		});
	</script>
</head>
<body>
</body>
</html>