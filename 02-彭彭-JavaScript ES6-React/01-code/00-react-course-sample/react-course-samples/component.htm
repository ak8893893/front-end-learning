<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8" />
	<title>組件的生命週期</title>
	<script src="https://unpkg.com/react@15/dist/react.min.js"></script>
	<script src="https://unpkg.com/react-dom@15/dist/react-dom.min.js"></script>
	<script>
		// 設計組件類別
		class MyHead extends React.Component{
			render(){ // 繪製 MyHead 組件的邏輯
				return React.createElement("H"+this.props.level, null, "Hello Component");
			}
		}
		class MyHeadList extends React.Component{
			constructor(props){
				super(props);
				this.state={maxLevel:props.start};
			}
			componentWillMount(){ // 組件將要繪製前的時刻
				this.intervalId=window.setInterval(()=>{
					// 每秒鐘執行這裡的邏輯
					this.setState((currentState, currentProps)=>{
						if(currentState.maxLevel>currentProps.end){ // 不要更新
							return currentState;
						}else{ // maxLevel + 1
							return {maxLevel:currentState.maxLevel+1};
						}
					});
				}, 1000);
			}
			componentWillUnmount(){ // 組件將要刪除前的時刻
				window.clearInterval(this.intervalId);
			}
			render(){ // 繪製 MyHeadList 組件的邏輯
				let heads=[];
				let head;
				for(let i=1;i<this.state.maxLevel;i++){
					head=React.createElement(MyHead, {level:i});
					heads.push(head);
				}
				return React.createElement("DIV", null, heads);
			}
		}
		window.addEventListener("load", ()=>{
			// 1. 建立自訂的 React 組件實體，給定屬性
			let myComponent=React.createElement(MyHeadList, {start:3, end:4});
			// 2. 將建立好的 React 組件實體畫到容器中
			ReactDOM.render(myComponent, document.body);
		});
	</script>
</head>
<body>
</body>
</html>